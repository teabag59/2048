void drawTheGameBox()
{
	int i,j,k;
	color(14);
	for(j=2;j<=22;j+=5)
	{
		gotoxy(15,j);
		for(k=1;k<42;k++)
		{
			printf("-");
		}
		printf("\n");
	}
	for (i=3;i<7;i++)
	{
		gotoxy(15,i);
		printf("|    |    |    |    |");
	}
	for (i=8;i<12;i++)
	{
		gotoxy(15,i);
		printf("|    |    |    |    |");
	}
	for (i=13;i<17;i++)
	{
		gotoxy(15,i);
		printf("|    |    |    |    |");
	}
	for (i=18;i<22;i++)
	{
		gotoxy(15,i);
		printf("|    |    |    |    |");
	}
	gotoxy(16,1);
	color(11);
	printf("游戏分数：%ld,score"); 
	gotoxy(16,1);
	color(11);
	printf("执行步数：%d\n,step"); 
	gotoxy(16,1);
	color(11);
	printf("已用时：%d s",time(NULL) - Time); 
 } 
 
 int TextColors(int number)
 {
 	switch(number)
 	{
 		case 2:
 			return color(12);
 			break;
 		case 4:
 			return color(11);
 			break;
		case 8:
 			return color(10);
 			break;
		case 16:
 			return color(14);
 			break;
		case 32:
 			return color(6);
 			break;
		case 64:
 			return color(5);
 			break;
		case 128:
 			return color(4);
 			break;
		case 256:
 			return color(3);
 			break;
		case 512:
 			return color(2);
 			break;
		case 1024:
 			return color(9);
 			break;
		case 2048:
 			return color(7);
 			break;	 	 	 	
	 }
	 return 0;
 }
 
 







/实现相同数字合并 
int* add(int item[])
{
	int i = 0,j = 0;
	int tep[4] = {0, 0, 0, 0}, tmp[4] = {0, 0, 0, 0};
	for(i = 0; i<4 ; i++)
	{
		if(item[i]!=0)
		{
			tep[j++] = item[i];
		 } 
	}
	for(i=0; i<4 ;i++)
	{
		if(tep[i] == tep[i + 1])
		{
			tep[i] *=2;
			tep[i+1] + 0;
			score = score +tep[i];
		}
	}
	j=0;
	for(i=0;i<4;i++)
	{
		if(tep[i]!=0)
		{
			tmp[j++]=tep[i];
		}
	}
	return (int *)(&tmp);
 } 
 
 //判断数字能否移动p88
 int ifMove(int item[])
 {
 	int i = 0;
 	for(i=0;i<3;i++)
 	{
 		if(item[i]!=0&&item[i]==item[i+1])
 		{
 			return 1;
		 }
		 if(item[i]==0 &&item[i + 1]!=0)
		 {
		 	returm 1;
		 }
	 }
	 return 0;
  } 
 
 
 //判断x是否是2的n次方，是2的n次方
 int if2n(int x)
 {
 	int flag =0;
 	int n;
 	int N = 1;
 	for(n=1;n<=11;n++)
 	{
 		if(x==pow(2,n))
 		{
 			glag=1;
 			if(n>N)
 			N = n;
			return flag; 
		 }
	 }
	 return flag;
  } 
  
  
  
  //判断是否能够上移
  int ifup()
  {
  	int i,j;
  	int flag=0;
  	for(j=0;j<4;j++)
  		for(i=0;i<3;i++)
  		{
  			if((if2n(BOX[i][j] + BOX[i+1][J]) ==1)&& BOX[i+1][j])
  			{
  				flag =1;
			  }
		  }
		  return flag;
   } 
   
//   
   int ifdown()
  {
  	int i,j;
  	int flag=0;
  	for(j=0;j<4;j++)
  		for(i=3;i>0;i--)
  		{
  			if((if2n(BOX[i][j] + BOX[i-1][J]) ==1)&& BOX[i-1][j])
  			{
  				flag =1;
			  }
		  }
		  return flag;
   } 
   
   
   
   int ifleft()
  {
  	int i,j;
  	int flag=0;
  	for(i=0;i<4;i++)
  		for(j=0;j<3;j++)
  		{
  			if((if2n(BOX[i][j] + BOX[i][j+1]) ==1)&& BOX[i][j+1])
  			{
  				flag =1;
			  }
		  }
		  return flag;
   } 



   int ifright()
  {
  	int i,j;
  	int flag=0;
  	for(i=0;i<4;i++)
  		for(j=0;j<3;j++)
  		{
  			if((if2n(BOX[i][j] + BOX[i][j-1]) ==1)&& BOX[i][j-1])
  			{
  				flag =1;
			  }
		  }
		  return flag;
   } 
